\__ProgramNode: contract node.idx(n : int) [<stat>; ... <stat>;]
	\__AttrDeclarationNode: n : int
		\__VarDeclarationNode: let last_fib_calculated = <expr> : int
			\__ ConstantNumNode: 1
		\__FuncDeclarationNode: def fib(n : int) : int
				\__ElseNode: else [<stat>; ... <stat>;]
					\__VarDeclarationNode: let a = <expr> : nat
						\__ MinusNode
							\__ VariableNode: n
							\__ ConstantNumNode: 1
					\__VarDeclarationNode: let b = <expr> : int
						\__ MinusNode
							\__ VariableNode: n
							\__ ConstantNumNode: 2
					\__ReturnStatementNode: return <expr>
						\__ PlusNode
							\__CallNode: fib(<expr>, ..., <expr>)
								\__ VariableNode: a
							\__CallNode: fib(<expr>, ..., <expr>)
								\__ VariableNode: b
		\__EntryDeclarationNode: Entry get_fib(n : int)
			\__AttrDeclarationNode: n : int
				\__VarDeclarationNode: let ad = <expr> : address
					\__ ConstantStringNode: "tz1QV341nbgxbyzd8SYU7fJtNScaLVPMZkGC"
				\__VarDeclarationNode: let result = <expr> : int
					\__CallNode: fib(<expr>, ..., <expr>)
						\__ VariableNode: n
				\__VarCallNode: last_fib_calculated = <expr>
					\__ VariableNode: result