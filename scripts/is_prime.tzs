contract prime_num(x: int){
    
    entry prime(x:int){
        let res:int = is_prime(x);
    }

    func abs(x:int):int{
        if (x < 0){
            let n_x = x * (0 - 1);
            return n_x;
        }
        else{
            return x;
        }
    }

    func sqrt(x:nat):int{
        if (x == 0){
                return 0;
        }
        else{
                let current = x / 2;
                while( x == x ){
                    let next:int = (current + (x / current)) / 2;
                    let cond:int = abs(next - current);
                    if ( cond == 0){
                    then{
                        return next;
                    }
                }
                current = next;
            }
        }
    }

    func is_prime(x:nat):int{
        let n = sqrt(x);
        while( n != 1){

            let y = x/n;
            let temp = y*n;
            
            if (x == temp){
                return 0;
            }
        }
        return 1;
    }

    let p:int = is_prime(5);
}