contract prime_num(x: int){
    
    func abs(x:int){
        if (x < 0){
            then{
                let n_x = x * (0 - 1);
                return n_x;
            }
            else{
                return x;
            }
        }
    }

    func sqrt(x:nat){
        if (x == 0){
            then {
                return 0;
            }
            else{
                let current = x / 2;
                while( x == x ){
                    let next:int = (current + (x / current)) / 2;
                    let cond:int = abs(next - current);
                    let eps: int = 0.0000000009;
                    if ( cond < eps){
                        then{
                            return next;
                        }
                    }
                    current = next;
                }
            }
        }
    }

    func is_prime(x:nat){
        let n = sqrt(x);
        while( n != 1){

            let y = x/n;
            let temp = y*n;
            
            if (x == temp){
                return False;
            }
        }
        return True;
    }
}